
import numpy as np

def cos_sim(a, b):
    """Takes 2 vectors a, b and returns the cosine similarity according
    to the definition of the dot product
    """
    dot_product = np.dot(a, b)
    norm_a = np.linalg.norm(a)
    norm_b = np.linalg.norm(b)
    return dot_product / (norm_a * norm_b)



vec_1 = "-0.54257095 -0.7504235 0.47349933 0.091743365 -0.4120343 0.2204507 -0.6768257 0.05748943 -0.62665004 0.05021668 0.04547554 0.060206227 0.16766231 0.6634683 -0.02956488 0.39443606 -0.1946665 -0.48839325 -0.77017367 -0.10441246 -0.36152065 -0.00021240974 -0.4278739 -0.32156605 0.2891158 0.041886695 0.03657363 0.2515874 0.42792788 -0.08300243 0.005472386 -0.5075652 -0.16221027 -1.047746 -0.04149756 0.039668187 0.62178785 -0.43927383 0.69761586 -0.29164994 0.09766903 0.03130422 0.2525309 -0.33621585 -0.3299786 0.041120995 -0.22205263 -0.03614147 -0.7029369 0.22273025 0.1959347 0.31506786 -0.983351 -0.24468383 -0.07750295 0.1288948 0.48703986 0.14675066 -0.38218942 0.2804344 0.06806987 -0.036271483 -0.25082293 -0.15418313 -0.0491241 -0.066472374 0.15034825 0.17298622 -0.08401525 -0.038637906 -0.20888619 0.3110215 -0.3436702 0.6351604 -0.010224343 0.50874263 -0.031181863 0.3517937 -0.29095662 -0.5548104 0.26137957 0.033824474 0.09002288 0.24691318 0.25919905 0.3331065 0.019829214 -0.016103685 0.38821068 -0.2540086 0.39652377 0.07228501 -0.016383635 0.15587623 -0.44221127 0.04229393 -0.4473531 -0.25336075 -0.2228268 0.37919 0.15729591 0.07015611 -0.020056402 -0.27988994 -0.14874722 0.26947305 -0.020381117 -0.58310723 -0.4228587 0.05050257 -0.5536804 -0.43272126 0.14793178 0.10424337 0.4242793 0.49191728 0.16450344 0.2633512 -0.13655958 0.14601523 0.19287491 -0.25900745 -0.31681716 0.48861146 0.16306706 -0.32618985 0.116726 0.56481445"
vec_2 = "0.16016686 -0.28568834 0.006346335 0.384067 0.21906713 0.09331264 -0.33990592 -0.09447905 -0.025173798 -0.009896897 0.05451319 0.16382937 -0.11553973 0.26917744 0.04564556 0.20561284 0.052588813 0.5038797 0.23470402 0.120340176 -0.1605965 -0.20781416 -0.20831919 0.030357186 0.2035451 -0.11797643 -0.022963045 0.24913213 0.088673905 -0.21922198 0.28955176 -0.43112865 -0.11552803 0.06393374 -0.092615895 0.103365205 0.056311097 -0.27724242 0.3240519 -0.48246992 -0.022819392 0.1413314 0.108734235 -0.36237088 -0.10798566 0.2607325 -0.08813052 0.07564387 0.07751367 -0.085156724 0.34754616 -0.24907619 -0.19319539 -0.13582917 -0.14186221 0.1223237 0.38740215 0.3936564 -0.2695059 0.13851 0.0015284945 -0.03900382 -0.1292033 0.07991404 -0.107409604 0.0756558 0.15309963 -0.0068750028 -0.15730071 0.019832086 0.33168185 -0.08935195 -0.22593303 0.586621 -0.21049507 -0.042731564 -0.121907264 0.04666368 -0.0020138572 -0.08922224 -0.17619611 -0.08685018 0.17566937 0.18670234 0.5304334 0.19213632 -0.055880956 -0.14480515 -0.062094215 -0.016341452 -0.009263526 0.22076426 -0.3122596 -0.2883847 -0.18056963 0.10042112 -0.5628588 -0.30961686 0.09088357 -0.52366626 0.15460011 0.12510844 -0.12403226 -0.40504926 0.05603999 0.1108564 -0.018127626 -0.191864 0.2630708 -0.07674936 -0.074700415 -0.20525134 0.2630723 -0.10177608 -0.15502718 0.19427603 -0.0413547 -0.06840256 0.23328786 -0.29610828 -0.15072137 0.07004156 0.24189422 0.07761956 0.16700812 0.09811956 0.031661022 0.40143394"


numpy_arr = []

emb = vec_1.split()

numpy_arr.append(np.array([float(e) for e in emb]))

emb_02 = vec_2.split()

numpy_arr.append(np.array([float(e) for e in emb_02]))

print(cos_sim(numpy_arr[0], numpy_arr[1]))
