
import numpy as np

def cos_sim(a, b):
    """Takes 2 vectors a, b and returns the cosine similarity according
    to the definition of the dot product
    """
    dot_product = np.dot(a, b)
    norm_a = np.linalg.norm(a)
    norm_b = np.linalg.norm(b)
    return dot_product / (norm_a * norm_b)



vec_1 = "-0.20794508 0.19596499 -0.29315385 0.3480065 -0.49380207 -0.030498449 -0.42856854 0.33517522 0.12848073 -0.27451333 -0.25726977 0.12172513 0.69648254 -0.074049026 0.30236667 0.08761752 -0.26417157 0.031134913 0.31623924 -0.3406857 -0.09629512 -0.014979477 0.19439222 0.26587752 -0.3601258 0.32832083 -0.32188168 -0.13723326 0.20646355 0.5156425 0.4855013 0.26220328 0.47502202 -0.21483961 -0.21310444 0.15865038 -0.41892028 -0.40488848 -0.32581216 -0.19509363 0.012559224 -0.16387269 -0.28304413 0.1454048 0.5377525 -0.2539806 0.051986314 -0.08111733 -0.7656557 0.24247724 -0.019108552 0.11067679 0.33018628 -0.3401793 0.27036524 -0.13153386 0.39283314 0.15722318 -0.17328095 -0.22640358 -0.12479796 0.66718954 0.034479678 0.25780055 -0.383903 0.029763328 0.3139475 -0.22744402 -0.080738954 0.0030325376 0.055077024 0.26987228 -0.7560419 -0.499773 0.1589003 -0.33313116 0.058934227 -0.12513179 -0.1411942 0.36285654 0.19745484 0.32859197 0.23454541 0.10813586 -0.10987108 0.22490872 -0.027782451 -0.008143275 0.1154784 0.41880327 -0.13170758 0.01339708 0.556097 -0.10545413 -0.069981605 0.08089633 0.3251893 0.6560684 -0.44496936 0.36036223 -0.048169 -0.4376938 -0.10893949 0.20091899 0.5252542 0.031240847 -0.32475674 -0.02161604 0.07134417 -0.25349128 -0.06769571 -0.40868872 0.08595205 -0.06935839 -0.24374813 -0.37661433 -0.19866104 -0.21255514 0.16570677 0.15643254 0.036519412 -0.20601188 -0.40823767 0.6366768 -0.045409165 -0.019827794 -0.030370474 0.6297457"
vec_2 = "-0.32264596 0.07850352 0.23779637 0.08801021 -0.3693321 -0.16210188 -0.14710799 -0.3139343 -0.29562515 0.4355723 0.003968339 -0.9293286 -0.043999813 -0.14683682 -1.2398528 0.26258644 0.6213026 0.0047953795 0.29143628 -0.0049916646 -0.082839414 0.22553475 -0.3857118 0.26682752 0.08325232 -0.16958947 0.6741874 -0.40532714 0.07860368 0.18142845 0.024358591 -0.090152085 0.12053363 -0.0927674 0.94608283 0.16967678 -0.2346782 0.4364111 -0.27117148 -0.07017006 -0.1300978 -0.43326846 -0.05449101 0.07204564 0.40937477 0.49668032 0.3002693 0.4587566 0.065411195 0.19832644 -0.1730999 -0.23253845 0.20660926 0.14286657 0.12474116 -0.04264586 -0.18661928 0.31691763 0.35841963 0.064673014 0.006251435 -0.040454794 -0.15118754 -0.5731989 -0.16048095 -0.11082571 0.17773569 0.27241716 -0.4720883 -0.2384409 0.70940673 -0.12846571 0.41981587 0.25074124 -0.46038687 0.43675444 0.07021352 -0.13650186 0.3617999 0.49114493 0.41770303 0.040111713 -0.37883893 -0.25082722 -0.8723845 0.19482091 0.41409296 -0.6094911 0.11981829 -0.13001671 -0.47340435 0.89858466 0.12477514 -0.4208535 -0.5376407 0.30341864 -0.1161021 0.20391965 -0.7476095 0.17491275 -0.16261736 0.59975463 0.6695479 -0.22957982 -0.079014905 -0.09998997 -0.6772081 0.6233844 0.20949805 0.55040723 0.282963 -0.5516982 -0.25590417 0.099486046 -0.68124247 0.10471396 -0.46283853 -0.19168149 0.2752385 0.0315179 0.42533946 -0.13421038 -0.61418706 -0.7803643 0.5788815 0.26539886 0.019879824 0.34475806"


numpy_arr = []

emb = vec_1.split()

numpy_arr.append(np.array([float(e) for e in emb]))

emb_02 = vec_2.split()

numpy_arr.append(np.array([float(e) for e in emb_02]))

print(cos_sim(numpy_arr[0], numpy_arr[1]))

# for i in range(10, 5, -1):
# 	print(i)

# with open("walks.txt") as file:

#     walks = file.readlines()


# for i in range(len(walks)):

#     walk = list(walks[i].replace("[", "").replace("]", "").replace(" ", "").replace("\n","").replace("\'","").split(","))

#     first = walk.pop(0)

#     print(first)

# import random

# for i in range(10):
# 	print(random.randint(0,10))
