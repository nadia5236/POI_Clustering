
# walks = []
# walk = []
# with open("walks.txt") as file:

#     for line in file:
#         tmp = line.strip("\n").replace("[", "").replace("]", "").replace("'", "").replace(",", "")
#         t = tmp.split(" ")
#         for i in range(len(t)):
#             walk.append(t[i])

#         walks.append(walk.copy())

#         walk.clear()


# for walk in walks:
#     print(walk)
# print(walks[0][0])
# print(type(walks[0][0]))
# print(walks[0])
# print(type(walks[0]))
# print(walks)
# print(type(walks))

# f = open('check.txt', 'w')
#
# f.write("\N{INFINITY}")


# import pandas as pd

# df = pd.read_csv("cos_sim_diff.csv")

# diff = df['cos_sim_diff']

# print(max(diff))


# list_a = [1, 2, 3, 4]
# list_b = [2, 3, 4, 5]
#
# common_num = [a for a in list_a for b in list_b if a == b]
#
# print(common_num)

# import pandas as pd
#
# df = pd.read_csv("nullm_cos_sim.csv")
#
# node1 = df['node1']
# node2 = df['node2']
#
# val1 = 3634
# val2 = 4089
#
# if(node1.__contains__(val1) and node2.__contains__(val2)):
#     print("it works")


# print(len(null_node1))
# print(len(real_node1))
# f = open("work.txt", "w")

# i = min(null_node1)
# j = max(null_node1)
# initial = i
# start = time.time()
#
# while (i <= j):
#     k = initial
#     while(k <= j):
#
#         print(i, k)
#
#         k = k + 1
#
#     i = i + 1

# # if (null_node1.__contains__(4186) and null_node2.__contains__(4185)):
# #     print("yes")
#

# matrix = [
#     [1,2,3],
#     [4,5,6],
#     [7,8,9]
# ]
#
# print( [[row[i] for row in matrix] for i in range(3)] )

# import statistics
#
# ar1 = [2, 3, 5, 8]
# ar2 = [10, 12, 14, 16, 18, 20]
#
# ar3 = []
#
# for i in range(len(ar1)):
#     ar3.append(ar1[i])
#
# for j in range(len(ar2)):
#     ar3.append(ar2[j])
#
# print(statistics.median(ar3))
# i = 7
# m = 10
#
# while i < m:
#
#     j = i + 1
#
#     while i < j <= m:
#
#         print(i, j)
#
#         j = j + 1
#
#     i = i + 1

#print([(x, y) for x in [1,2,3] for y in [3,1,4]])

# label = {}
#
# label.update({1 : 111})
# label.update({2: 222})
#
# print(label[1])
# import numpy as np
#
# def cos_sim(a, b):
#     """Takes 2 vectors a, b and returns the cosine similarity according
#     to the definition of the dot product
#     """
#     dot_product = np.dot(a, b)
#     norm_a = np.linalg.norm(a)
#     norm_b = np.linalg.norm(b)
#     return dot_product / (norm_a * norm_b)
#
#
# vec_01 = np.array('-0.007650643 -0.009549154 0.091615245 -0.13353358 -0.52406967 -0.08405416 0.31740084 0.09271758 0.22299664 0.20114723 -0.48940662 0.15792094 -0.35641888 0.044545162 0.023697188 0.24829356 -0.09559558 -0.1822826 0.20432459 0.28928915 -0.43588442 -0.012018842 0.4336654 0.31877956 -0.033520587 0.20396468 -0.3581079 -0.18390435 0.0032986098 0.1325649 0.09968705 -0.04546817 0.77275735 -0.14000884 0.5042643 -0.55254155 -0.3194669 0.7599283 -0.13139717 0.17669725 0.354023 -0.49631274 -0.024974795 0.12047888 -0.039303504 0.20253134 0.19195764 0.1419333 -0.4779735 -0.19741242 0.6721356 -0.0069958135 0.5305478 -0.006144302 0.18445128 -0.22257769 -0.15354839 0.07987597 0.13592057 -0.02687679 -0.016742816 0.09992015 0.030184943 -0.16580579 0.7023268 -0.2866617 0.45670655 0.011197609 -0.020278314 0.44990256 0.4917864 -0.43539056 -0.06686608 -0.42695937 0.18863025 -0.29063922 -0.19655679 0.28442186 0.6149187 0.1786683 -0.13812377 -0.08620079 -0.045506142 -0.33028758 -0.7170458 -0.301688 -0.122933574 0.15163559 -0.22430453 0.8270811 0.14224353 0.1610338 0.12260604 0.10491208 0.67289895 -0.51499915 -0.17575791 0.84526396 0.1445013 0.4261649 0.35723686 -0.081784725 0.105933085 -0.28416032 -0.31815702 -1.0546529 0.28199056 -0.49809745 0.12657402 -0.6589853 0.7211838 -0.6126622 -0.6983753 -0.31685537 0.015165091 0.3890709 0.033510808 -0.16414316 -0.21758132 -0.10938546 0.3614133 0.13238025 -0.7361334 0.21028922 0.5037301 0.2446538 -0.26643834 -0.16855142')
#
# vec_02 = np.array('-0.1207083 -0.017966487 0.0951996 -0.0943245 -0.58682656 -0.08029666 0.32502615 0.11727725 0.2500554 0.14381257 -0.47993323 0.19677825 -0.43552208 -0.01479365 0.08290029 0.18491843 -0.08611582 -0.14661425 0.21162724 0.24770959 -0.44500902 0.015357411 0.42068395 0.29412168 -0.037325695 0.1964083 -0.3876761 -0.23298512 0.025457248 0.052384324 0.15046912 -0.08610504 0.6796957 -0.17371689 0.5158202 -0.5003613 -0.33605498 0.76236016 -0.15395789 0.16964896 0.40102103 -0.5237635 0.053512786 0.11028418 -0.02265756 0.22781184 0.15085389 0.20363891 -0.42030874 -0.21004643 0.6848099 0.060410395 0.50608355 -0.061020598 0.075966835 -0.28117925 -0.10444783 0.08917393 0.02825132 -0.08636742 0.022294924 0.1295641 0.0031323 -0.08760142 0.7032817 -0.27431777 0.4992166 0.04113723 0.007909749 0.46606275 0.40050456 -0.42224964 -0.013911789 -0.37192273 0.21624637 -0.23905706 -0.1981584 0.2928347 0.6029196 0.20440888 -0.060629148 -0.09887173 -0.06203182 -0.33860284 -0.69750553 -0.21407439 -0.07220711 0.13037476 -0.18605627 0.90785956 0.118974835 0.149266 0.10627507 0.10894541 0.6346468 -0.41646227 -0.20096073 0.8045527 0.18875827 0.35920048 0.29697663 -0.09260396 0.12963471 -0.24296768 -0.32726946 -1.091181 0.2595565 -0.44856724 0.08999497 -0.62827736 0.7164207 -0.6373547 -0.655806 -0.2976153 -0.028478067 0.44554886 0.1563444 -0.21083488 -0.18274796 -0.10160777 0.33204654 0.18713357 -0.7716409 0.20361447 0.4589965 0.35782886 -0.20441397 -0.098435804')
#
#
# print(cos_sim(vec_01, vec_02))
