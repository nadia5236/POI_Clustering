
import numpy as np

def cos_sim(a, b):
    """Takes 2 vectors a, b and returns the cosine similarity according
    to the definition of the dot product
    """
    dot_product = np.dot(a, b)
    norm_a = np.linalg.norm(a)
    norm_b = np.linalg.norm(b)
    return dot_product / (norm_a * norm_b)



vec_1 = "0.005913073 -0.20371516 -0.1727731 -0.052769225 0.06826259 -0.3215906 0.0473817 0.041239377 0.020647254 -0.11595005 -0.13462771 -0.27492586 -0.18761903 0.06712314 0.041119017 0.023237243 0.024504736 0.29826185 -0.31723776 0.11362922 0.020964094 0.042485937 -0.04068923 -0.055198044 -0.13796546 0.22088411 -0.17549606 -0.06524899 -0.21713586 -0.21053699 -0.17494527 0.043716904 -0.054903146 -0.08424106 -0.12820564 0.0767623 -0.06790595 -0.0034677032 0.11772543 -0.013219651 -0.22119701 -0.39642528 -0.12178191 -0.05064707 0.15971836 0.06870492 0.055104975 -0.086050354 0.0020175516 0.26158622 -0.005891464 0.04555028 -0.12419424 0.13432918 0.14573343 -0.093072854 -0.17617348 -0.18765387 -0.16307622 0.042447194 -0.014831616 0.025912104 -0.01467093 -0.28330532 -0.08038489 0.031344667 -0.12553641 0.12730618 0.029976746 0.04751141 0.17985108 -0.34648445 0.01267896 0.078877755 -0.22096384 -0.023130955 0.10957246 -0.010076443 0.10923153 0.027139127 0.0052039516 0.27668855 0.049103256 -0.08969457 -0.024804048 0.07087732 -0.20937967 0.035906203 -0.009319711 0.07862959 0.056274835 0.14359194 0.19658878 -0.32276466 0.26900786 -0.16260211 -0.07025178 -0.06917736 -0.10395758 0.014003259 -0.14330715 -0.037067775 0.18887223 0.21458209 -0.07292939 -0.026321867 -0.081513904 -0.08000926 0.18378496 -0.040728863 0.051995058 -0.30826145 0.11760614 -0.059836376 -0.07941809 -0.03402162 0.33029503 -0.06534832 0.1974482 0.059111 0.24468216 -0.05126849 0.053262834 -0.062556535 0.058880884 -0.25169218 -0.17352289 0.13088879"
vec_2 = "-0.00044004188 -0.0291998 -0.0274819 -0.010945407 0.013126627 -0.045585714 0.0081203645 -0.0005298557 -0.002963113 -0.013464919 -0.01793668 -0.04122227 -0.033624396 0.0046850555 0.010638289 0.0029206267 0.002690072 0.04681476 -0.0499629 0.021161838 0.003579644 0.0009428379 -0.0035315023 -0.0156271 -0.02872435 0.029770616 -0.026927648 -0.008318562 -0.030694917 -0.026513383 -0.027180156 0.009852096 -0.0061682537 -0.010383549 -0.023362294 0.01636503 -0.0061683627 0.0040128883 0.01742854 0.0012387114 -0.028361768 -0.05919134 -0.022096515 -0.009693838 0.025654722 0.013188756 0.0058333143 -0.017675046 -0.003331583 0.040883802 -0.0031702672 0.0154712675 -0.022840247 0.023283362 0.029454585 -0.013455239 -0.030822309 -0.025060507 -0.029890236 0.00728607 -0.0010729658 0.0071176914 0.0012438856 -0.04510762 -0.011485615 0.004174471 -0.018090872 0.015917983 -1.2717908e-05 0.0030308822 0.01994649 -0.046789937 0.0036195526 0.014195084 -0.036438867 -0.0008596407 0.018245904 0.00035665816 0.016037442 0.008248632 0.0050892173 0.035936613 0.0071773967 -0.020043083 -0.0011727479 0.0062424815 -0.03686309 -0.0015151756 0.0051798224 0.015138098 0.007272257 0.017177923 0.034606233 -0.051176686 0.03616254 -0.024658438 -0.01472835 -0.01257126 -0.011474195 0.0034258468 -0.012581945 -0.0056340806 0.029597545 0.032340545 -0.016497098 -0.0049217213 -0.013640599 -0.011286716 0.020729981 -0.001604432 0.010746472 -0.050471995 0.016199362 -0.0062481184 -0.014777428 -0.008832899 0.049023744 -0.011108442 0.024667434 0.011167355 0.040591095 -0.006223961 0.015032153 -0.0091042565 0.0120680705 -0.036232926 -0.022788685 0.023623347"


numpy_arr = []

emb = vec_1.split()

numpy_arr.append(np.array([float(e) for e in emb]))

emb_02 = vec_2.split()

numpy_arr.append(np.array([float(e) for e in emb_02]))

print(cos_sim(numpy_arr[0], numpy_arr[1]))
